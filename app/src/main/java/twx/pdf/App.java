/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package twx.pdf;

import org.apache.commons.io.FilenameUtils;

import java.nio.file.Paths;
import java.nio.file.Path;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TimeZone;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.BrowserType;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import com.microsoft.playwright.options.LoadState;
import com.microsoft.playwright.options.Margin;

public class App {

	final static Logger logger  = LoggerFactory.getLogger(App.class);
   
    public void CreatePDF() {
        try ( Playwright playwright = Playwright.create() ) {
            // creating the Browser ... 
            Browser browser = playwright.chromium().launch( new BrowserType.LaunchOptions()
              .setChannel("msedge")
              .setHeadless(false)
              // .setSlowMo(50)
            );

            // creating the context ...
            BrowserContext  context = browser.newContext( new Browser.NewContextOptions()
                .setLocale("de-DE")
                .setTimezoneId("Europe/Berlin")
                .setViewportSize(1024, 800 )
            );
                
            Map<String, String> headers = new HashMap<String, String>();
            // headers.put("appkey", ""); 
            headers.put("sec-ch-ua-platform", "windows"); 
            headers.put("sec-ch-ua", "\"Chromium\";v=\"92\", \"Microsoft Edge\";v=\"92\", \"GREASE\";v=\"99\""); 
            context.setExtraHTTPHeaders(headers);

            Page page = context.newPage();
            page.navigate("https://google.de");
            // page.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));            
            page.waitForLoadState(LoadState.NETWORKIDLE);
//             page.waitFor
           //  page.waitFor
            // page.wait(5000);
            page.pdf( new Page.PdfOptions()
                .setPath( Paths.get("e:/temp/screenshot1.pdf") )
                .setMargin( new Margin().setTop("10px").setBottom("10px").setLeft("10px").setRight("10px"))
                .setPrintBackground(false)
                .setScale(1)
                .setLandscape(false)
                .setFormat("A4")
            );
            page.pdf( new Page.PdfOptions()
                .setPath( Paths.get("e:/temp/screenshot2.pdf") )
                .setMargin( new Margin().setTop("10px").setBottom("10px").setLeft("10px").setRight("10px"))
                .setPrintBackground(false)
                .setScale(1)
                .setLandscape(true)
                .setFormat("A4")
            );
            browser.close();
        }     
        catch(Exception err) {
          logger.error( err.getMessage() );
        }
    }
    
    void fileNameParse(String fileName) {
        Path p = Paths.get(fileName);

        logger.info("Path: {}", FilenameUtils.getFullPath(fileName));
        logger.info("Name: {}", FilenameUtils.getBaseName(fileName) );
        logger.info("Extension: {}", FilenameUtils.getExtension(fileName) );

        if( FilenameUtils.getExtension(fileName).isEmpty() ) 
            logger.info("Extension: {}", "Is Empty");
    }
    

    public static void main(String[] args) {
        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
        var app 	= new App();
        var scanner	= new Scanner(System.in);
        
        logger.info("---------- Start-App ----------");
        try {
            app.fileNameParse("p1/p2/test.app");
		}
        catch(Exception ex) {
            logger.error(ex.getMessage());
        }
        logger.info( "---------- Exit-App ----------");
    }
}
